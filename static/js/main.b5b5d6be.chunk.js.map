{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","Weather","time","temp","rain","main","desc","Object","classCallCheck","this","Clock","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","Date","toLocaleTimeString","hour","minute","wakeUpTime","quote","daydate","weather","weatherOne","weatherTwo","weatherThree","weatherFour","weatherFive","handleClick","bind","assertThisInitialized","setAlarm","updateQuote","getWeather","init","_this2","timerID","setInterval","tick","clearInterval","get","body","console","log","data","weatherArray","date","hours","getHours","hoursDiff","Math","abs","offset","floor","i","length","list","dt_txt","description","round","setState","getMinutes","myDay","getDay","myDate","getDate","myMonth","getMonth","quotes","item","random","oldDateObj","newDateObj","getTime","diff","alarm","react_default","a","createElement","Component","App","className","App_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5b5d6be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst axios = require('axios');\n\nclass Weather {\n  constructor(time, temp, rain, main, desc) {\n    this.time = time;\n    this.temp = temp;\n    this.rain = rain;\n    this.main = main\n    this.desc = desc;\n  }\n}\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n                  , wakeUpTime: 'Set alarm', quote: ''\n                  , daydate: ''\n                  , weather: [new Weather(),new Weather(),new Weather(),new Weather(),new Weather()]\n                  , weatherOne: ''\n                  , weatherTwo: ''\n                  , weatherThree: ''\n                  , weatherFour: ''\n                  , weatherFive: ''};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n    this.setAlarm = this.setAlarm.bind(this);\n    this.updateQuote = this.updateQuote.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n    this.init = this.init.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 60000); // once a minute\n    this.init();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  async init() {\n    this.tick();\n    this.updateQuote();\n\n    /*let weatherArray = await this.getWeather();\n    console.log(\"this.weather: \" + this.weather);*/\n  }\n\n  async getWeather() {\n    let apiKey = '3e924a3845067246d9b98a6075c44a26';\n    let city = 'dublin';\n    let url = \"http://api.openweathermap.org/data/2.5/forecast?q=dublin&appid=3e924a3845067246d9b98a6075c44a26&units=metric\";\n\n    let body = await axios.get(url);\n    console.log(body.data);\n\n    // 9am, 12pm, 3pm, 6pm, 9pm\n    let weatherArray = [new Weather(), new Weather(), new Weather(), new Weather(), new Weather()];\n\n    let date = new Date();\n    let hours = date.getHours();\n    console.log(date.getHours());\n\n    let hoursDiff = Math.abs(hours - 9);\n    console.log(hoursDiff);\n\n    let offset = Math.floor(hoursDiff / 3) - 1; // as we have 3 hour increments\n    console.log(offset);\n\n    var i;\n    for (i = 0; i < weatherArray.length; i++) { \n      weatherArray[i].time = body.data.list[i+offset].dt_txt;\n      weatherArray[i].main = body.data.list[i+offset].weather[0].main;\n      weatherArray[i].desc = body.data.list[i+offset].weather[0].description;\n      weatherArray[i].temp = body.data.list[i+offset].main.temp;\n      let rain = Math.round(body.data.list[i+offset].rain['3h'], 3);\n      if (rain) {\n        weatherArray[i].rain = rain;\n      } else {\n        weatherArray[i].rain = 0;\n      }\n      console.log(weatherArray[i]);\n    }\n\n    this.setState({\n      weatherOne: \"Time: \" + weatherArray[0].dt_txt + \" \" + weatherArray[0].main + \" \" + weatherArray[0].desc + \" \" + weatherArray[0].temp + \" degrees. % rain: \" +  weatherArray[0].rain,\n      weatherTwo: weatherArray[1].dt_txt + weatherArray[1].main + weatherArray[1].desc + weatherArray[1].temp + weatherArray[1].rain,\n      weatherThree: weatherArray[2].dt_txt + weatherArray[2].main + weatherArray[2].desc + weatherArray[2].temp + weatherArray[2].rain,\n      weatherFour: weatherArray[3].dt_txt + weatherArray[3].main + weatherArray[3].desc + weatherArray[3].temp + weatherArray[3].rain,\n      weatherFive: weatherArray[4].dt_txt + weatherArray[4].main + weatherArray[4].desc + weatherArray[4].temp + weatherArray[4].rain,\n\n    })\n\n    this.setState({\n      weather: weatherArray\n    })\n\n    return weatherArray;\n  }\n\n  tick() {\n    var date = new Date();\n\n    if(date.getMinutes() === 0){ // Check the time\n        this.updateQuote();\n        //this.getWeather();\n    }\n\n    date = date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n    this.setState({\n      time: date\n    })\n\n    var date = new Date();\n\n    var days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    var myDay = days[date.getDay()-1];\n    var myDate = date.getDate();\n    var myMonth = months[date.getMonth()];\n\n    this.setState({\n      daydate: myDay + ' ' + myDate + ' ' + myMonth\n    })\n  }\n\n  handleClick() {\n    this.setAlarm();\n    //this.setState(state => ({alarm: \"test\"}));\n  }\n\n  updateQuote() {\n\n    var quotes = [\"\\\"He who has a ‘why’ can live to bear almost any ‘how’.\\\" -Nietzsche\"\n                  , \"\\\"We must all suffer one of two things, discipline or regret.\\\"\"\n                  , \"\\\"Action expresses priorities\\\" - Gandhi\"\n                  , \"\\“The line dividing good and evil cuts through the heart of every human being.\\” - Aleksandr Solzhenitsyn\"\n                ]\n    \n    var item = quotes[Math.floor(Math.random()*quotes.length)];\n\n    this.setState({\n      quote: item\n    })\n  }\n\n  setAlarm() {\n    console.log('hi');\n    var oldDateObj = new Date();\n    var diff = 600; // 10 hours\n    var newDateObj = new Date(oldDateObj.getTime() + diff*60000);\n    this.setState(state => ({alarm: 'Alarm set for: ' + newDateObj.toLocaleTimeString()}))\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.daydate}</h1>\n        {/*<h3>9am {this.state.weatherOne}, 12pm {this.state.weatherTwo}, 3pm {this.state.weatherThree}, 6pm {this.state.weatherFour}, 9pm {this.state.weatherFive}</h3>*/}\n        <p>{this.state.time}</p>\n        <h3>{this.state.quote}</h3>\n      </div>\n    )  \n  }\n}\n\n/*\n{this.weather.map((weather, index) => (\n            <p>{weather.time} {weather.main}</p>\n        ))}\n        */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Clock />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}